services:
  labs-challenge-api:
    build:
      context: .
      dockerfile: ./LabsChallengeApi/Dockerfile
    container_name: labs-challenge-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
      - ASPNETCORE_URLS=http://+:8081
    depends_on:
      sql-server-db:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8081:8081"
    
  email-service-worker:
    build:
      context: .
      dockerfile: ./EmailServiceWorker/Dockerfile
    container_name: email-service-worker
    environment:
      - DOTNET_ENVIRONMENT=Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    
  labs-challenge-front:
    build:
      context: ./labs_challenge_front
      dockerfile: Dockerfile
    container_name: labs-challenge-front
    ports:
      - "8080:80"
    depends_on:
      - labs-challenge-api

  mssqldata:
    image: mcr.microsoft.com/mssql/server:2019-latest
    entrypoint: /bin/bash

  sql-server-db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    ports:
      - 1433:1433
    volumes:
      - /var/opt/mssql
      - ./init/mssqlsettings:/usr/src/app 
    working_dir: /usr/src/app 
    command: sh -c ' chmod +x ./entrypoint.sh; ./entrypoint.sh & /opt/mssql/bin/sqlservr;'
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: Magazine123
    volumes_from:
      - mssqldata

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.18.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:9200/_cluster/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 50s

  kibana:
    image: docker.elastic.co/kibana/kibana:8.18.2
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_SECURITY_ENABLED=false
    depends_on:
      elasticsearch:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:4.1.1-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbitmq_management load_definitions "/etc/rabbitmq/definitions.json"
    volumes:
      - ./init/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  esdata:
  rabbitmq-data:
  front-volume:
  mssqldata: