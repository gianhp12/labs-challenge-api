services:
  labs-challenge-api:
    build:
      context: .
      dockerfile: ./LabsChallengeApi/Dockerfile
    container_name: labs-challenge-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
      - ASPNETCORE_URLS=http://+:8081
    depends_on:
      sql-server-db:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      rabbit-init:
        condition: service_started
    ports:
      - "8081:8081"
    
  email-service-worker:
    build:
      context: .
      dockerfile: ./EmailServiceWorker/Dockerfile
    container_name: email-service-worker
    environment:
      - DOTNET_ENVIRONMENT=Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbit-init:
        condition: service_started
    restart: unless-stopped
    
  labs-challenge-front:
    build:
      context: ./labs_challenge_front
      dockerfile: Dockerfile
    container_name: labs-challenge-front
    ports:
      - "8080:80"
    depends_on:
      - labs-challenge-api

  sql-server-db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sql-server-db
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Magazine123
    ports:
      - "1433:1433"
    volumes:
      - ./init/mssqlsettings:/docker-entrypoint-initdb.d:z
    entrypoint: ["/bin/bash", "-c", "/docker-entrypoint-initdb.d/configure-db.sh & /opt/mssql/bin/sqlservr"]
    healthcheck:
      test: [
        "CMD",
        "/opt/mssql-tools18/bin/sqlcmd",
        "-S", "localhost",
        "-U", "sa",
        "-P", "Magazine123",
        "-Q", "SELECT 1"
      ]
      interval: 10s       
      timeout: 10s    
      retries: 5
      start_period: 30s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  kibana:
    image: docker.elastic.co/kibana/kibana:9.0.2
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_SECURITY_ENABLED=false
    depends_on:
      - elasticsearch

  rabbitmq:
    image: rabbitmq:4.1.1-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  rabbit-init:
    image: curlimages/curl:latest
    container_name: rabbit_init
    depends_on:
      rabbitmq:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c", "sh /scripts/configure-queue.sh"]
    volumes:
      - ./init/rabbitmq:/scripts

volumes:
  esdata:
  rabbitmq-data:
  front-volume: